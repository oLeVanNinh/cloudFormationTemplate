{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template ELBWithLockedDownAutoScaledInstances: Create a load balanced, Auto Scaled sample website where the instances are locked down to only accept traffic from the load balancer. This example creates an Auto Scaling group behind a load balancer with a simple health check. The web site is available on port 80, however, the instances can be configured to listen on any port (8888 by default). **WARNING** This template creates one or more Amazon EC2 instances and an Application Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
    "AMIName": {
      "Type": "String",
      "Description": "Name for AMI creation",
      "ConstraintDescription": "Name for image",
      "MinLength": "6",
      "MaxLength": "64"
    },

    "DBName": {
      "Default": "MyDatabase",
      "Description": "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64"
    },

    "DBUser": {
      "NoEcho": "true",
      "Description": "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters"
    },

    "DBRootPassword": {
      "NoEcho": "true",
      "Description": "Password for mysql access",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings": {
    "AWSInstanceType2Arch" : {
       "t1.micro"    : { "Arch" : "HVM64"  },
       "t2.nano"     : { "Arch" : "HVM64"  },
       "t2.micro"    : { "Arch" : "HVM64"  },
       "t2.small"    : { "Arch" : "HVM64"  },
       "t2.medium"   : { "Arch" : "HVM64"  },
       "t2.large"    : { "Arch" : "HVM64"  },
       "m1.small"    : { "Arch" : "HVM64"  },
       "m1.medium"   : { "Arch" : "HVM64"  },
       "m1.large"    : { "Arch" : "HVM64"  },
       "m1.xlarge"   : { "Arch" : "HVM64"  },
       "m2.xlarge"   : { "Arch" : "HVM64"  },
       "m2.2xlarge"  : { "Arch" : "HVM64"  },
       "m2.4xlarge"  : { "Arch" : "HVM64"  },
       "m3.medium"   : { "Arch" : "HVM64"  },
       "m3.large"    : { "Arch" : "HVM64"  },
       "m3.xlarge"   : { "Arch" : "HVM64"  },
       "m3.2xlarge"  : { "Arch" : "HVM64"  },
       "m4.large"    : { "Arch" : "HVM64"  },
       "m4.xlarge"   : { "Arch" : "HVM64"  },
       "m4.2xlarge"  : { "Arch" : "HVM64"  },
       "m4.4xlarge"  : { "Arch" : "HVM64"  },
       "m4.10xlarge" : { "Arch" : "HVM64"  },
       "c1.medium"   : { "Arch" : "HVM64"  },
       "c1.xlarge"   : { "Arch" : "HVM64"  },
       "c3.large"    : { "Arch" : "HVM64"  },
       "c3.xlarge"   : { "Arch" : "HVM64"  },
       "c3.2xlarge"  : { "Arch" : "HVM64"  },
       "c3.4xlarge"  : { "Arch" : "HVM64"  },
       "c3.8xlarge"  : { "Arch" : "HVM64"  },
       "c4.large"    : { "Arch" : "HVM64"  },
       "c4.xlarge"   : { "Arch" : "HVM64"  },
       "c4.2xlarge"  : { "Arch" : "HVM64"  },
       "c4.4xlarge"  : { "Arch" : "HVM64"  },
       "c4.8xlarge"  : { "Arch" : "HVM64"  },
       "g2.2xlarge"  : { "Arch" : "HVMG2"  },
       "g2.8xlarge"  : { "Arch" : "HVMG2"  },
       "r3.large"    : { "Arch" : "HVM64"  },
       "r3.xlarge"   : { "Arch" : "HVM64"  },
       "r3.2xlarge"  : { "Arch" : "HVM64"  },
       "r3.4xlarge"  : { "Arch" : "HVM64"  },
       "r3.8xlarge"  : { "Arch" : "HVM64"  },
       "i2.xlarge"   : { "Arch" : "HVM64"  },
       "i2.2xlarge"  : { "Arch" : "HVM64"  },
       "i2.4xlarge"  : { "Arch" : "HVM64"  },
       "i2.8xlarge"  : { "Arch" : "HVM64"  },
       "d2.xlarge"   : { "Arch" : "HVM64"  },
       "d2.2xlarge"  : { "Arch" : "HVM64"  },
       "d2.4xlarge"  : { "Arch" : "HVM64"  },
       "d2.8xlarge"  : { "Arch" : "HVM64"  },
       "hi1.4xlarge" : { "Arch" : "HVM64"  },
       "hs1.8xlarge" : { "Arch" : "HVM64"  },
       "cr1.8xlarge" : { "Arch" : "HVM64"  },
       "cc2.8xlarge" : { "Arch" : "HVM64"  }
     },

     "AWSInstanceType2NATArch" : {
       "t1.micro"    : { "Arch" : "NATHVM64"  },
       "t2.nano"     : { "Arch" : "NATHVM64"  },
       "t2.micro"    : { "Arch" : "NATHVM64"  },
       "t2.small"    : { "Arch" : "NATHVM64"  },
       "t2.medium"   : { "Arch" : "NATHVM64"  },
       "t2.large"    : { "Arch" : "NATHVM64"  },
       "m1.small"    : { "Arch" : "NATHVM64"  },
       "m1.medium"   : { "Arch" : "NATHVM64"  },
       "m1.large"    : { "Arch" : "NATHVM64"  },
       "m1.xlarge"   : { "Arch" : "NATHVM64"  },
       "m2.xlarge"   : { "Arch" : "NATHVM64"  },
       "m2.2xlarge"  : { "Arch" : "NATHVM64"  },
       "m2.4xlarge"  : { "Arch" : "NATHVM64"  },
       "m3.medium"   : { "Arch" : "NATHVM64"  },
       "m3.large"    : { "Arch" : "NATHVM64"  },
       "m3.xlarge"   : { "Arch" : "NATHVM64"  },
       "m3.2xlarge"  : { "Arch" : "NATHVM64"  },
       "m4.large"    : { "Arch" : "NATHVM64"  },
       "m4.xlarge"   : { "Arch" : "NATHVM64"  },
       "m4.2xlarge"  : { "Arch" : "NATHVM64"  },
       "m4.4xlarge"  : { "Arch" : "NATHVM64"  },
       "m4.10xlarge" : { "Arch" : "NATHVM64"  },
       "c1.medium"   : { "Arch" : "NATHVM64"  },
       "c1.xlarge"   : { "Arch" : "NATHVM64"  },
       "c3.large"    : { "Arch" : "NATHVM64"  },
       "c3.xlarge"   : { "Arch" : "NATHVM64"  },
       "c3.2xlarge"  : { "Arch" : "NATHVM64"  },
       "c3.4xlarge"  : { "Arch" : "NATHVM64"  },
       "c3.8xlarge"  : { "Arch" : "NATHVM64"  },
       "c4.large"    : { "Arch" : "NATHVM64"  },
       "c4.xlarge"   : { "Arch" : "NATHVM64"  },
       "c4.2xlarge"  : { "Arch" : "NATHVM64"  },
       "c4.4xlarge"  : { "Arch" : "NATHVM64"  },
       "c4.8xlarge"  : { "Arch" : "NATHVM64"  },
       "g2.2xlarge"  : { "Arch" : "NATHVMG2"  },
       "g2.8xlarge"  : { "Arch" : "NATHVMG2"  },
       "r3.large"    : { "Arch" : "NATHVM64"  },
       "r3.xlarge"   : { "Arch" : "NATHVM64"  },
       "r3.2xlarge"  : { "Arch" : "NATHVM64"  },
       "r3.4xlarge"  : { "Arch" : "NATHVM64"  },
       "r3.8xlarge"  : { "Arch" : "NATHVM64"  },
       "i2.xlarge"   : { "Arch" : "NATHVM64"  },
       "i2.2xlarge"  : { "Arch" : "NATHVM64"  },
       "i2.4xlarge"  : { "Arch" : "NATHVM64"  },
       "i2.8xlarge"  : { "Arch" : "NATHVM64"  },
       "d2.xlarge"   : { "Arch" : "NATHVM64"  },
       "d2.2xlarge"  : { "Arch" : "NATHVM64"  },
       "d2.4xlarge"  : { "Arch" : "NATHVM64"  },
       "d2.8xlarge"  : { "Arch" : "NATHVM64"  },
       "hi1.4xlarge" : { "Arch" : "NATHVM64"  },
       "hs1.8xlarge" : { "Arch" : "NATHVM64"  },
       "cr1.8xlarge" : { "Arch" : "NATHVM64"  },
       "cc2.8xlarge" : { "Arch" : "NATHVM64"  }
     },

     "AWSRegionArch2AMI" : {
       "us-east-1"        : {"HVM64" : "ami-0080e4c5bc078760e", "HVMG2" : "ami-0aeb704d503081ea6"},
       "us-west-2"        : {"HVM64" : "ami-01e24be29428c15b2", "HVMG2" : "ami-0fe84a5b4563d8f27"},
       "us-west-1"        : {"HVM64" : "ami-0ec6517f6edbf8044", "HVMG2" : "ami-0a7fc72dc0e51aa77"},
       "eu-west-1"        : {"HVM64" : "ami-08935252a36e25f85", "HVMG2" : "ami-0d5299b1c6112c3c7"},
       "eu-west-2"        : {"HVM64" : "ami-01419b804382064e4", "HVMG2" : "NOT_SUPPORTED"},
       "eu-west-3"        : {"HVM64" : "ami-0dd7e7ed60da8fb83", "HVMG2" : "NOT_SUPPORTED"},
       "eu-central-1"     : {"HVM64" : "ami-0cfbf4f6db41068ac", "HVMG2" : "ami-0aa1822e3eb913a11"},
       "eu-north-1"       : {"HVM64" : "ami-86fe70f8", "HVMG2" : "ami-32d55b4c"},
       "ap-northeast-1"   : {"HVM64" : "ami-00a5245b4816c38e6", "HVMG2" : "ami-09d0e0e099ecabba2"},
       "ap-northeast-2"   : {"HVM64" : "ami-00dc207f8ba6dc919", "HVMG2" : "NOT_SUPPORTED"},
       "ap-northeast-3"   : {"HVM64" : "ami-0b65f69a5c11f3522", "HVMG2" : "NOT_SUPPORTED"},
       "ap-southeast-1"   : {"HVM64" : "ami-05b3bcf7f311194b3", "HVMG2" : "ami-0e46ce0d6a87dc979"},
       "ap-southeast-2"   : {"HVM64" : "ami-02fd0b06f06d93dfc", "HVMG2" : "ami-0c0ab057a101d8ff2"},
       "ap-south-1"       : {"HVM64" : "ami-0ad42f4f66f6c1cc9", "HVMG2" : "ami-0244c1d42815af84a"},
       "us-east-2"        : {"HVM64" : "ami-0cd3dfa4e37921605", "HVMG2" : "NOT_SUPPORTED"},
       "ca-central-1"     : {"HVM64" : "ami-07423fb63ea0a0930", "HVMG2" : "NOT_SUPPORTED"},
       "sa-east-1"        : {"HVM64" : "ami-05145e0b28ad8e0b2", "HVMG2" : "NOT_SUPPORTED"},
       "cn-north-1"       : {"HVM64" : "ami-053617c9d818c1189", "HVMG2" : "NOT_SUPPORTED"},
       "cn-northwest-1"   : {"HVM64" : "ami-0f7937761741dc640", "HVMG2" : "NOT_SUPPORTED"}
     }
   },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16"
      }
    },

    "PublicSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": "us-east-1a"
      }
    },

    "PublicSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": "us-east-1b"
      }
    },

    "PublicSubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": "us-east-1c"
      }
    },

    "PrivateSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": "us-east-1a"
      }
    },

    "PrivateSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.5.0/24",
        "AvailabilityZone": "us-east-1b"
      }
    },

    "PrivateSubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.6.0/24",
        "AvailabilityZone": "us-east-1c"
      }
    },

    "PrivateDBSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.8.0/24",
        "AvailabilityZone": "us-east-1a"
      }
    },

    "PrivateDBSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.9.0/24",
        "AvailabilityZone": "us-east-1b"
      }
    },

    "PrivateDBSubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.10.0/24",
        "AvailabilityZone": "us-east-1c"
      }
    },

    "VPCInternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },

    "VpcGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": { "Ref": "VPCInternetGateway" },
        "VpcId": { "Ref": "VPC" }
      }
    },

    "PublicRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" }
      }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRT" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "VPCInternetGateway" }
      }
    },

    "PublicARouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRT" },
        "SubnetId": { "Ref": "PublicSubnetA" }
      }
    },

    "PublicBRouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRT" },
        "SubnetId": { "Ref": "PublicSubnetB" }
      }
    },

    "PublicCRouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRT" },
        "SubnetId": { "Ref": "PublicSubnetC" }
      }
    },

    "NetworkAclPublic": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "VPC" }
      }
    },

    "NetworkAclPrivate": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "VPC" }
      }
    },

    "SubnetNetworkAclAssociationPublicA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPublic" },
        "SubnetId": { "Ref": "PublicSubnetA" }
      }
    },

    "SubnetNetworkAclAssociationPublicB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPublic" },
        "SubnetId": { "Ref": "PublicSubnetB" }
      }
    },

    "SubnetNetworkAclAssociationPublicC": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPublic" },
        "SubnetId": { "Ref": "PublicSubnetC" }
      }
    },

    "SubnetNetworkAclAssociationPrivateA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPrivate" },
        "SubnetId": { "Ref": "PrivateSubnetA" }
      }
    },

    "SubnetNetworkAclAssociationPrivateB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPrivate" },
        "SubnetId": { "Ref": "PrivateSubnetB" }
      }
    },

    "SubnetNetworkAclAssociationPrivateC": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPrivate" },
        "SubnetId": { "Ref": "PrivateSubnetC" }
      }
    },

    "SubnetNetworkAclAssociationPrivateDBA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPrivate" },
        "SubnetId": { "Ref": "PrivateDBSubnetA" }
      }
    },

    "SubnetNetworkAclAssociationPrivateDBB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPrivate" },
        "SubnetId": { "Ref": "PrivateDBSubnetB" }
      }
    },

    "SubnetNetworkAclAssociationPrivateDBC": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPrivate" },
        "SubnetId": { "Ref": "PrivateDBSubnetC" }
      }
    },

    "NetworkAclEntryPublicInAllowAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPublic" },
        "RuleNumber": 99,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0"
      }
    },

    "NetworkAclEntryPublicOutAllowAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPublic" },
        "RuleNumber": 99,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": true,
        "CidrBlock": "0.0.0.0/0"
      }
    },

    "NetworkAclEntryInPrivateAllowVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPrivate" },
        "RuleNumber": 99,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0"
      }
    },

    "NetworkAclEntryOutPrivateAllowVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAclPrivate" },
        "RuleNumber": 99,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": true,
        "CidrBlock": "0.0.0.0/0"
      }
    },

    "NatElasticIP": {
      "Type": "AWS::EC2::EIP"
    },

    "NATGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": ["NatElasticIP", "AllocationId"] },
        "SubnetId": { "Ref": "PublicSubnetA" }
      }
    },

    "PrivateRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" }
      }
    },

    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRT" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NATGateway" }
      }
    },

    "PrivateARouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRT" },
        "SubnetId": { "Ref": "PrivateSubnetA" }
      }
    },

    "PrivateBRouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRT" },
        "SubnetId": { "Ref": "PrivateSubnetB" }
      }
    },

    "PrivateCRouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRT" },
        "SubnetId": { "Ref": "PrivateSubnetC" }
      }
    },

    "PrivateDBARouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRT" },
        "SubnetId": { "Ref": "PrivateDBSubnetA" }
      }
    },

    "PrivateDBBRouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRT" },
        "SubnetId": { "Ref": "PrivateDBSubnetB" }
      }
    },

    "PrivateDBCRouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRT" },
        "SubnetId": { "Ref": "PrivateDBSubnetC" }
      }
    },

    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupName": "rdssubnet",
        "DBSubnetGroupDescription": "Private group subnet for db",
        "SubnetIds": [{ "Ref": "PrivateDBSubnetA"}, { "Ref": "PrivateDBSubnetB"}, { "Ref": "PrivateDBSubnetC"}]
      }
    },

    "DBCluster": {
      "Type": "AWS::RDS::DBCluster",
      "Properties": {
        "Engine": "aurora-mysql",
        "EngineVersion": "5.7.mysql_aurora.2.04.7",
        "MasterUsername": { "Ref": "DBUser" },
        "MasterUserPassword": { "Ref": "DBRootPassword" },
        "DBSubnetGroupName": { "Ref": "DBSubnetGroup" },
        "VpcSecurityGroupIds": [{ "Fn::GetAtt": ["DBSecurityGroup", "GroupId"]}]
      }
    },

    "DBInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBClusterIdentifier": { "Ref": "DBCluster" },
        "DBInstanceClass": "db.t2.medium",
        "Engine": "aurora-mysql"
      }
    },

    "DBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to SQL connect",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "3306", "ToPort": "3306", "SourceSecurityGroupId": { "Fn::GetAtt": ["InstanceSecurityGroup", "GroupId"] }}
        ]
      }
    },

    "WebServer": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "DBInstance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "full_install": ["install_cfn", "install_ruby_2_5_1", "install_application"]
          },

          "install_cfn": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": ["", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v",
                  "  --stack ", { "Ref": "AWS::StackName" },
                  "  --resource WebServer",
                  "  --configsets full_install",
                  "  --region ", { "Ref": "AWS::Region" }, "\n",
                  "runas=root\n"
                ]] },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            },

            "services": {
              "sysvinit": {
                "cfn-hup": { "enabled":  "true", "ensureRunning": "true", "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "install_ruby_2_5_1": {
            "files": {
              "/tmp/install_ruby": {
                "content": {
                  "Fn::Join": ["\n",
                    [
                      "#!/bin/bash",
                      "sudo su - ec2-user",
                      "curl -sSL https://get.rvm.io | bash",
                      "source /etc/profile.d/rvm.sh",
                      "rvm install 2.5.1",
                      "rvm --default use 2.5.1",
                      "curl --silent --location https://rpm.nodesource.com/setup_12.x | sudo bash -",
                      "sudo yum install -y nodejs yarn git",
                      "gem install rails -v 5.2.1"
                    ]
                  ]
                },
                "mode": "000500",
                "owner": "ec2-user",
                "group": "ec2-user"
              }
            },
            "packages": {
              "yum": {
                "ruby-devel": []
              }
            },
            "commands": {
              "01_install_ruby": {
                "command": "/tmp/install_ruby > /var/log/install_ruby.log"
              }
            }
          },

          "install_application": {
            "packages": {
              "yum": {
                "mysql-devel": []
              }

            },
            "files": {
              "/tmp/database.yml": {
                "content": { "Fn::Join": ["", [
                  "development:\n",
                  "  adapter: mysql2\n",
                  "  encoding: utf8\n",
                  "  reconnect: false\n",
                  "  pool: 5\n",
                  "  database: ", { "Ref": "DBName" }, "\n",
                  "  username: ", { "Ref": "DBUser" }, "\n",
                  "  password: ", { "Ref": "DBRootPassword" }, "\n",
                  "  host: ", { "Fn::GetAtt": ["DBCluster", "Endpoint.Address"] }, "\n"
                ]] },
                "mode": "000400",
                "owner": "ec2-user",
                "group": "ec2-user"
              },
              "/tmp/install_application": {
                "content": { "Fn::Join": ["", [
                  "#!/bin/bash -e\n",
                  "source /etc/profile.d/rvm.sh\n",
                  "echo $(whoami) \n",
                  "rvm use 2.5.1\n",
                  "export HOME=/home/ec2-user\n",
                  "export PATH=$PATH:/usr/local/bin\n",
                  "cd /home/ec2-user\n",

                  "# Kill the rails server if it is running to allow update\n",
                  "if pgrep ruby &> /dev/null; then pkill -TERM ruby; fi\n",

                  "rails new sample -d mysql --skip-spring --skip-bundle --force\n",
                  "cd /home/ec2-user/sample\n",
                  "sed -i 's/^# \\(.*therubyracer.*$\\)/\\1/' Gemfile\n",
                  "bundle install\n",
                  "rails g scaffold Note title:string body:text --force\n",
                  "cp /tmp/database.yml config\n",
                  "rails db:create\n",
                  "rails db:migrate\n"
                ]] },
                "mode": "000500",
                "owner": "ec2-user",
                "group": "ec2-user"
              },
              "/home/ec2-user/start-application": {
                "content": { "Fn::Join": ["", [
                  "#!/bin/bash -e\n",
                  "source /etc/profile.d/rvm.sh\n",
                  "rvm use 2.5.1\n",
                  "export HOME=/home/ec2-user\n",
                  "export PATH=$PATH:/usr/local/bin\n",
                  "cd /home/ec2-user/sample\n",
                  "rails s -b 0.0.0.0 -p 80 -d"
                ]] },
                "mode": "000500",
                "owner": "ec2-user",
                "group": "ec2-user"
              }
            },
            "commands": {
              "01_install_application": {
                "command": "/tmp/install_application > /var/log/install_application.log"
              },
              "02_configure_reboot": {
                "command": "echo /home/ec2-user/start-application >> /etc/rc.local"
              },
              "03_start_application": {
                "command": "/home/ec2-user/start-application"
              },
              "04_cleanup": {
                "command": "rm /tmp/install_application"
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" },
                          { "Fn::FindInMap": ["AWSInstanceType2Arch", { "Ref": "InstanceType" }, "Arch"] }] },
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroupIds": [ { "Fn::GetAtt": ["InstanceSecurityGroup", "GroupId"] } ],
        "KeyName": { "Ref": "KeyName" },
        "SubnetId": { "Ref": "PrivateSubnetA" },
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",
          "/opt/aws/bin/cfn-init -v ",
          "  --stack ", { "Ref": "AWS::StackId" },
          "  --resource WebServer ",
          "  --configsets full_install",
          "  --region ", { "Ref": "AWS::Region" }, "\n",
          "/opt/aws/bin/cfn-signal -e $? ",
          "  --stack ", { "Ref": "AWS::StackId" },
          "  --resource WebServer ",
          "  --region ", { "Ref": "AWS::Region" }, "\n"
        ]]}}
      },

      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      }
    },

    "AMI": {
      "Type": "Custom::AMI",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": ["AMIFunction", "Arn"]},
        "InstanceId": { "Ref": "WebServer"},
        "ImageName": { "Ref": "AMIName" }
      }
    },

    "AMIFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {"Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
        "Code": {
          "ZipFile": { "Fn::Join": ["\n", [
            "import boto3                                                                                     ",
            "import cfnresponse                                                                               ",
            "import time                                                                                      ",
            "def handler(event, context):                                                                     ",
            "  try:                                                                                           ",
            "    ec2 = boto3.resource('ec2')                                                                  ",
            "    instance_id = event['ResourceProperties']['InstanceId']                                      ",
            "    image_name = event['ResourceProperties']['ImageName']                                        ",
            "    print(instance_id)                                                                           ",
            "    print(event)                                                                                 ",
            "    instance = ec2.Instance(instance_id)                                                         ",
            "    image = instance.create_image(Name=image_name)                                               ",
            "    resolved_image(image, event, context)                                                        ",
            "    instance.stop()                                                                              ",
            "  except Exception as e:                                                                         ",
            "    print(e)                                                                                     ",
            "    cfnresponse.send(event, context, cfnresponse.FAILED, {'error': 'error'})                     ",
            "                                                                                                 ",
            "def resolved_image(image, event, context):                                                       ",
            "  counter = 0                                                                                    ",
            "  timeout = 600                                                                                  ",
            "  step = 10                                                                                      ",
            "                                                                                                 ",
            "  while counter < timeout:                                                                       ",
            "    time.sleep(step)                                                                             ",
            "    counter += step                                                                              ",
            "    image.reload()                                                                               ",
            "    if image.state == 'available':                                                               ",
            "      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'image_id': image.id}, image.id)    ",
            "      break                                                                                      ",
            "                                                                                                 ",
            "  if image.state != 'available':                                                                 ",
            "    cfnresponse.send(event, context, cfnresponse.FAILED, {'error': 'Timeout'})                   ",
            "    exit()                                                                                       "
            ]]
          }
        },
        "Runtime": "python3.8",
        "Timeout": "900"
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
        ],
        "Policies": [
          {
            "PolicyName": "EC2Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "ec2:DescribeInstances",
                  "ec2:DescribeImages",
                  "ec2:CreateImage",
                  "ec2:StopInstances"
                ],
                "Resource": ["*"]
               }
              ]
            }
          }
        ]
      }
    },

    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [{ "Ref": "PrivateSubnetA" }, { "Ref": "PrivateSubnetB" }, { "Ref": "PrivateSubnetC" }],
        "LaunchConfigurationName": { "Ref": "LaunchConfig"},
        "MinSize": "2",
        "MaxSize": "2",
        "TargetGroupARNs": [{ "Ref": "ALBTargetGroup" }],
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "300"
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": "AMI",
      "Properties": {
        "ImageId": { "Fn::GetAtt": ["AMI", "image_id"] },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [{"Ref": "InstanceSecurityGroup"}],
        "InstanceType": {"Ref": "InstanceType"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash -xe\n",
              "yum update -y aws-cfn-bootstrap\n",
              "/opt/aws/bin/cfn-signal -e 0 --stack ", { "Ref": "AWS::StackName" },
              " --resource WebServerGroup ",
              " --region ", { "Ref": "AWS::Region" }, "\n",
              "cd /home/ec2-user/sample\n",
              "if pgrep ruby &> /dev/null; then pgrep ruby | xargs kill; fi\n",
              "rails s -b 0.0.0.0 -p 80 -d\n"
            ]]
          }
        }
      }
    },

    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Subnets":[{ "Ref": "PrivateSubnetA" }, { "Ref": "PrivateSubnetB" }, { "Ref": "PrivateSubnetC" }],
        "SecurityGroups": [{"Ref": "ALBSecurityGroup"}]
      }
    },

    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": {"Ref": "ALBTargetGroup"}
        }],
        "LoadBalancerArn": {"Ref": "ApplicationLoadBalancer"},
        "Port": "80",
        "Protocol": "HTTP"
      }
    },

    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 3,
        "Port": 80,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 5,
        "VpcId": {"Ref": "VPC"}
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "SourceSecurityGroupId": {"Fn::Select": [0, {"Fn::GetAtt": ["ApplicationLoadBalancer", "SecurityGroups"]}]}
        }, {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": { "Ref": "SSHLocation" }
        }],
        "VpcId": { "Ref": "VPC" }
      }
    },

    "ALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access from any where",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }],
        "VpcId": { "Ref": "VPC" }
      }
    }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ApplicationLoadBalancer", "DNSName" ]}]]}
    }
  }
}
